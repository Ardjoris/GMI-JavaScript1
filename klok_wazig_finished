<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>Page Title</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <!-- <link rel='stylesheet' type='text/css' media='screen' href='main.css'>
    -->
<style>
        
        #canvas {
          /* //  background-image: C:\Librarys\klok.png; */
            border: solid
        }
</style>
</head>

<body>
    <h3>Dit is een klok</h3>
    <!-- maak en canvas aan (een veld waarin je kunt tekenen met js) -->
    <div id="header"></div>    
<canvas id="canvas" width="500" height="500"></canvas>
</body>
<script>
 let time = document.createElement("div") 

    const c = document.querySelector("#canvas");                     //select canvas from DOM
    let ctx = c.getContext("2d");                                    //get access to the <canvas> tags 2D drawing functions
        let img = new Image();
        img.src = './klok.png';
        ctx.drawImage(img, 0,0)
    ctx.translate(canvas.width / 2, canvas.height / 2);              //translate the center in the middle
    ctx.strokeStyle = "black"

    

    window.requestAnimationFrame(draw);

    function draw() {
            let date = new Date();
            let mSec = date.getMilliseconds()
            let sec = date.getSeconds()
            let minutes = date.getMinutes()
            let hours = date.getHours()
            let minLength
            let gageLength

            let yes = 1
            let no = 0

            
    let header = document.querySelector(`#header`)
    time.remove()
    time = document.createElement("div")
    let pHours = document.createElement(`p`)
    pHours = hours
    let pminutes = document.createElement(`p`)
    pminutes = minutes
    let pseconds = document.createElement(`p`)
    pseconds = sec
    time.append(pHours,":",pminutes,":",pseconds)
    //time.append()
    header.append(time)

    function gageLengthFunction(gageSchrinkFactor) {
        
        minLength = (Math.min(canvas.width / 2, canvas.height / 2))        
        gageLength = minLength*gageSchrinkFactor                        //set the length of the "hand"
        return gageLength
    }
            //millisecondewijzer:      
            radialsPerMilliSecond= (2 * Math.PI) /1000         // full circle = 2pi in 1000 ms
            gageLengthFunction(1)
            let milliSecondsAngle = (radialsPerMilliSecond*mSec) - (Math.PI/2) // minus 90 degrees, to start in the north
            linePointToPoint(Math.cos (milliSecondsAngle)*gageLength, Math.sin(milliSecondsAngle)*gageLength, 1)

            secondPlusMilliseconds= radialsPerMilliSecond*mSec/60
            radialsPerSecond= (2 * Math.PI) / 60                     // full circle = 2pi in 1 minute
            gageLengthFunction(2/3)
            let secondsAngle = (radialsPerSecond*sec) - (Math.PI/2) + secondPlusMilliseconds // - (Math.Pi/4) minus 90 degrees
            linePointToPoint((Math.cos(secondsAngle))*gageLength, Math.sin((secondsAngle))*gageLength, 0)

            minutesPlusSeconds= (radialsPerSecond*sec)/60
            radialsPerMinute= (2 * Math.PI) / 60      // full circle = 2pi in 1000 ms
            gageLengthFunction(3/5)
            let minutesAngle = (radialsPerMinute*minutes) - (Math.PI/2) + minutesPlusSeconds  // - (Math.Pi/4) minus 90 degrees
           linePointToPoint(Math.cos (minutesAngle)*gageLength, Math.sin(minutesAngle)*gageLength, 0)

            hourPlusMinutes= (radialsPerMinute*minutes)/12
            radialsPerHour= (2 * Math.PI) / 12      // full circle = 2pi in 1 hour
            let hoursAngle = (radialsPerHour*hours) - (Math.PI/2) + hourPlusMinutes // - (Math.Pi/4) minus 90 degrees
            gageLengthFunction(3/8)
           linePointToPoint(Math.cos (hoursAngle)*gageLength, Math.sin(hoursAngle)*(gageLength), 0)
           
         //   let centiSecondsAngle = (radialsPerCentiSecond*(mSec)) - (Math.PI/2) 
          //  let deciSecondsAngle = (radialsPerMilliSecond*mSec)/100 - (Math.PI/2) 
           // let secondsAngle = (radialsPerMilliSecond*mSec/1000) - (Math.PI/2)
         //   
          //  linePointToPoint100(Math.cos (centiSecondsAngle)*gageLength, Math.sin(centiSecondsAngle)*gageLength)
           // linePointToPoint(Math.cos (secondsAngle)*gageLength, Math.sin(secondsAngle)*gageLength)
            window.requestAnimationFrame(draw);
            console.log("sec",sec)
            
                // if (mSec <= 15) {
                //     ctx.clearRect(-canvas.width/2, -canvas.height/2, canvas.width, canvas.height)
                // }
           
                
            }

    

            function linePointToPoint(x, y, erease) {
                
            if (erease==1){ctx.clearRect(-canvas.width / 2,-canvas.height / 2, canvas.width, canvas.height)}
            ctx.beginPath();
            ctx.moveTo(0, y);
            ctx.lineTo(x, 0);
            ctx.stroke();
            }

</script>

</html>
